// Mocks generated by Mockito 5.4.5 from annotations
// in hotelmangement/test/features/hotel_management/domain/usecases/table/get_tables_in_hotel.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hotelmangement/core/error/failure.dart' as _i5;
import 'package:hotelmangement/features/hotel_management/domain/entities/table.dart'
    as _i6;
import 'package:hotelmangement/features/hotel_management/domain/repositories/hotel_table_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HotelTableRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelTableRepository extends _i1.Mock
    implements _i3.HotelTableRepository {
  MockHotelTableRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Table>> createTable({
    required String? hotelId,
    required String? tableNumber,
    required int? space,
    required String? floor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createTable, [], {
              #hotelId: hotelId,
              #tableNumber: tableNumber,
              #space: space,
              #floor: floor,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Table>>.value(
              _FakeEither_0<_i5.Failure, _i6.Table>(
                this,
                Invocation.method(#createTable, [], {
                  #hotelId: hotelId,
                  #tableNumber: tableNumber,
                  #space: space,
                  #floor: floor,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Table>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Table>> updateTable({
    required String? tableId,
    required String? hotelId,
    String? tableNumber,
    int? space,
    String? floor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateTable, [], {
              #tableId: tableId,
              #hotelId: hotelId,
              #tableNumber: tableNumber,
              #space: space,
              #floor: floor,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Table>>.value(
              _FakeEither_0<_i5.Failure, _i6.Table>(
                this,
                Invocation.method(#updateTable, [], {
                  #tableId: tableId,
                  #hotelId: hotelId,
                  #tableNumber: tableNumber,
                  #space: space,
                  #floor: floor,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Table>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTable({
    required String? tableId,
    required String? hotelId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTable, [], {
              #tableId: tableId,
              #hotelId: hotelId,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteTable, [], {
                  #tableId: tableId,
                  #hotelId: hotelId,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Table>>> getTables({
    required String? hotelId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTables, [], {#hotelId: hotelId}),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Table>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Table>>(
                    this,
                    Invocation.method(#getTables, [], {#hotelId: hotelId}),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Table>>>);
}
